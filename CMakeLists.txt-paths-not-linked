cmake_minimum_required(VERSION 3.6)
project(rockchip_npu)
# Set cross-compilation settings
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR aarch64)
set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
# Set the sysroot
set(CMAKE_SYSROOT /usr/aarch64-linux-gnu)
set(CMAKE_LIBRARY_PATH ${CMAKE_SYSROOT}/lib ${CMAKE_SYSROOT}/usr/lib)
set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})
# Configure cross-compilation search
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
# Set compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++23 -march=armv8.2-a -Ofast")

# Add OpenCV paths
set(OpenCV_DIR /usr/lib/aarch64-linux-gnu/cmake/opencv4)
find_package(OpenCV 4 REQUIRED)

# Include directories
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(include)
#include_directories(${CMAKE_SYSROOT}/usr/include)

# Set library search paths
link_directories(/usr/lib/aarch64-linux-gnu)

# Forcefully ignore specific libraries by using dummy stubs
# The --allow-shlib-undefined flag allows the build to succeed even if shared libraries are missing
# The -z noexecstack is a security feature that shouldn't affect functionality
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--allow-shlib-undefined -Wl,-z,noexecstack")

# Add linker wrappers to ignore specific libraries
# This tells the linker to ignore/stub out specific symbols
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--wrap=dlopen")

# rknn api
set(LIB_ARCH aarch64)
set(RKNN_RT_LIB "${CMAKE_SOURCE_DIR}/3rdparty/static/librknnrt.so")

# Add a custom source file to provide dummy implementations of wrapped functions
# Create the stub file if it doesn't exist
file(WRITE ${CMAKE_BINARY_DIR}/stubs.c "
#include <dlfcn.h>
#include <stddef.h>
void* __wrap_dlopen(const char* filename, int flags) {
    // Intercept attempts to load the libraries we want to exclude
    if (filename && (
        strstr(filename, \"libblas.so\") ||
        strstr(filename, \"libGLX.so\") ||
        strstr(filename, \"liblapack.so\"))) {
        return NULL;  // Return NULL to indicate the library couldn't be loaded
    }
    // Call the real dlopen for all other libraries
    return dlopen(filename, flags);
}
")

add_executable(rockchip_npu src/main.cpp ${CMAKE_BINARY_DIR}/stubs.c)

target_link_libraries(rockchip_npu
    ${RKNN_RT_LIB}
    ${OpenCV_LIBS}
    -L/usr/lib/aarch64-linux-gnu
    -ltbb
    -lz
    # Removed -lGLX
    # Removed -llapack
    # Removed -lblas
    -lavcodec
    -lavformat
    -lavutil
    -lswscale
    -lgstreamer-1.0
    -lgstapp-1.0
    -lgstbase-1.0
    -lgstriff-1.0
    -lgstvideo-1.0
    -lgstaudio-1.0
    -lgstpbutils-1.0
    -lgobject-2.0
    -lglib-2.0
    -ldc1394
    -lgphoto2
    -lgphoto2_port
    -lpthread
    -ldl
    -lm
)

# Set RPATH
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib:/usr/lib/aarch64-linux-gnu:${CMAKE_SYSROOT}/lib:${CMAKE_SYSROOT}/usr/lib")
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
install(TARGETS rockchip_npu DESTINATION bin)
